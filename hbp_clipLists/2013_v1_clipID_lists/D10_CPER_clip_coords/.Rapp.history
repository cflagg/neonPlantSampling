what is the
q()
?sample
modules = c(1:4)
modules
?sample
sample(modules, 3, replace=F)
?order
order(sample(modules, 3, replace=F))
?sort
sort(sample(modules,3,replace=F))
mat = matrix(data=NA, nrow=2, ncol=4)
mat
q()
9":;'<4"=+"#(#0%4>=;"*%4%">;"&#4#-/"!"&",".1?@AA5BABA5BCBA5DEAA8" "9:;'<4"=+"'-#.>'"*%4%"1&&8"%4"#%.6"#(#0%4>=;"!"''4",".1FDG)D5CFC)H5@FD)B5EC@)H8"9":;'<4"=+"&#%;"4#&'#-%4<-#"*%4%"1IJ8"%4"#%.6"#(#0%4>=;"!"4#&'",".1?C)F5?E)F5?A)G5C)?8"9":;'<4"=+"/=>("IKL"-%4>="%4"#%.6"#(#0%4>=;"!".;",".1B?)AE5"B?)@H5"?F)DD5"?F)BC8"9":;'<4"=+"MN6=->O=;"/=>("'P"%4"#%.6"#(#0%4>=;"!"'P",".1E)B@5"E)?5"E)B5"E)?B8
q()
m = c(1500,2020,2720,3400)
ppt = c(938.3,797.6,593.2,475.6)
cor(m,ppt)
q()
library(scatterplot3d)
q()
?nls
q()
a1 <- data.frame(#
  A = 1:3,#
  B = c("A", "D", "X"),#
  C = c(6, 7, 3),#
  D = c(8, 3, 3)#
)#
a2 <- data.frame(#
  A = 4:6,#
  B = c("D", "Z", "X"),#
  C = c(2, 3, 3),#
  D = c(3, 5, 4)#
)
a1
a2
merged <- merge(a1, a2, c("B", "D"))
merged
subset(merged, select = c(A.x, A.y))
?unique
str(iris)
?duplicated
q()
?runif
?cat
i <- 0#
repeat{#
	x <- runif(1)#
	if (x < .1){#
	   i <- i + 1#
	   cat("x = ", x, "\n")#
	   }#
    if (i == 10) break#
    }
x
E.range = c(0,450)
E.range
range(E.range)
?range
?round
x = 450/20
x
x = 450/100
x
floor(450/100)
ceiling(450/100)
trunc(450/100)
round(450/100)
475/100
round(475/100)
trunc(475/100)
floor(475/100)
floor(495/100)
floor(500/100)
ls()
modules
ppt
x
m
mat
E.range
a2
a1
rm(list=ls())
ls
ls()
names()
?unique
x = rep(seq(from=0, to=10, by=1), each=5)
x
unique(x)
length(unique(x))
x = rep(c("Qula","Pipa","Tsca","Tsca","Qula","Qula","Psme"), times=3)
x
unique(x)
length(unique(x))
q()
ls()
rm(list=ls())
ls()
q()
x = 1:10
y = 11:20
test = list(res1=x, res2=y)
test
test$res2
y = "blat"
y
test = list(res1=x, res2=y)
test$res2
lm.y = runif(10)
lm.y
z = lm(lm.y~x)
test = list(res1=y, res2=z)
test$res2
z = summary(z)
z
test = list(res1=y, res2=z)
test$res2
plot(lm.y~x)
test$res2[coef]
q()
sample.num2 = function(stdev, average, plot.size=NA){#
#
## Calculate the coefficient of variation from the standard deviation and mean input by the user#
CV = stdev/average#
##	Calculate plot.area in hectares from plot.size in meters#
plot.area = plot.size^2/10000#
## Create vector of t-statistics associated with 2-tailed cumulative probabilities that equal 80%, 90%, and 95%, and assuming df=infinity. Values were taken from http://en.wikipedia.org/wiki/Student's_t-distribution#
t.2tail = c("80%"=1.282, "90%"=1.645, "95%"=1.960)#
##	Define levels of error "E" for which sample-size "n" is desired#
E = c(0.1, 0.2, 0.3)#
## Define an empty matrix to hold sample number "n" values and "total area sampled" corresponding to range of errors contained in "E" above, for each value of "t.2tail" vector.#
n.mat = matrix(data=NA, nrow=length(E)*length(t.2tail), ncol=2)#
colnames(n.mat) = c("n","tot.ha")#
##	Define "error", "CI.2tail", and "t.stat" vectors, and combine into a data.frame with n.mat above.#
error = rep(E, times=length(t.2tail))#
CI.2tail = rep(names(t.2tail), each=length(E))#
t.stat = as.numeric(rep(t.2tail, each=length(E)))#
temp.df = data.frame(error, CI.2tail, t.stat, n.mat, stringsAsFactors=FALSE)#
##	Calculate sample-size "n" required for defined levels of "error" and associated values of "t.stat"; use "n" values to calculate total area sampled with user-defined "plot.size".#
temp.df$n = temp.df$t.stat^2*CV^2/temp.df$error^2#
#
#	Employ "if/else" statement to inform user if plot.size was not supplied; if plot.size is supplied, then calculate total area sampled in hectares.#
if (is.na(plot.size)){#
print("A value for plot.size was not entered, so total area sampled cannot be calculated.")#
#
} else {#
temp.df$tot.ha = temp.df$n*plot.area#
#
#	End of "if/else" statement bracket#
}#
##	Plot curves showing sample size "n" as a function of acceptable error, with a separate curve for each level of confidence specified in "t.2tail"#
#
#	Create empty plot to contain curves#
plot(temp.df$error, temp.df$n, type="n", xlab="Error (proportion of mean)", ylab="Sample size (n)", xlim=c(0.05, max(temp.df$error)), ylim=c(0, max(temp.df$n)+5), main="Relationship between error and sample size\nat various levels of confidence")#
#
#	Employ "for" loop to plot curves for each value of "t.2tail"#
for (i in 1:length(t.2tail)){#
curve(t.2tail[i]^2*CV^2/x^2, 0.05, max(E), col=i, add=TRUE)#
#	End of "for" loop bracket#
}#
#
# Add lines to the plot that illustrate the location of the "n" value associated with acceptable error = 20% at a 95% confidence level.#
v.x = c(0.2,0.2)#
v.y = c(-1, temp.df$n[8])#
lines(v.x, v.y, col="gray60", lty=1)#
h.x = c(0,0.2)#
h.y = c(temp.df$n[8], temp.df$n[8])#
lines(h.x, h.y, col="gray60", lty=1)#
#
# Add a point to the plot that illustrates the location of the "n" value for acceptable error = 20% of the mean at a 95% confidence level.#
points(0.2, temp.df$n[8], pch=21, bg="gray80")#
#
# Create legend based on confidence levels contained in "t.2tail"#
legend("topright", c("95% conf (alpha/2=0.025)", "90% conf (alpha/2=0.05)", "80% conf (alpha/2=0.10)"), col=c("green", "red", "black"), title="Confidence level (2-tail)", lty=1, cex=0.8)#
##	Clean up "temp.df" to return to user#
temp.df$n = ceiling(temp.df$n)#
temp.df$tot.ha = round(temp.df$tot.ha, digits=2)#
return(temp.df)#
#
#	End of function bracket#
}
ls()
test = sample.num2(0.257,0.825,40)
names(test)
test
test[which(test$error==0.2 & test$CI.2tail=="95%"),"n"]
test[which(test$error=="0.2" & test$CI.2tail=="95%"),"n"]
sample.num2 = function(stdev, average, plot.size=NA){#
#
## Calculate the coefficient of variation from the standard deviation and mean input by the user#
CV = stdev/average#
##	Calculate plot.area in hectares from plot.size in meters#
plot.area = plot.size^2/10000#
## Create vector of t-statistics associated with 2-tailed cumulative probabilities that equal 80%, 90%, and 95%, and assuming df=infinity. Values were taken from http://en.wikipedia.org/wiki/Student's_t-distribution#
t.2tail = c("80%"=1.282, "90%"=1.645, "95%"=1.960)#
##	Define levels of error "E" for which sample-size "n" is desired#
E = c(0.1, 0.2, 0.3)#
## Define an empty matrix to hold sample number "n" values and "total area sampled" corresponding to range of errors contained in "E" above, for each value of "t.2tail" vector.#
n.mat = matrix(data=NA, nrow=length(E)*length(t.2tail), ncol=2)#
colnames(n.mat) = c("n","tot.ha")#
##	Define "error", "CI.2tail", and "t.stat" vectors, and combine into a data.frame with n.mat above.#
error = rep(E, times=length(t.2tail))#
CI.2tail = rep(names(t.2tail), each=length(E))#
t.stat = as.numeric(rep(t.2tail, each=length(E)))#
temp.df = data.frame(error, CI.2tail, t.stat, n.mat, stringsAsFactors=FALSE)#
##	Calculate sample-size "n" required for defined levels of "error" and associated values of "t.stat"; use "n" values to calculate total area sampled with user-defined "plot.size".#
temp.df$n = temp.df$t.stat^2*CV^2/temp.df$error^2#
#
#	Employ "if/else" statement to inform user if plot.size was not supplied; if plot.size is supplied, then calculate total area sampled in hectares.#
if (is.na(plot.size)){#
print("A value for plot.size was not entered, so total area sampled cannot be calculated.")#
#
} else {#
temp.df$tot.ha = temp.df$n*plot.area#
#
#	End of "if/else" statement bracket#
}#
##	Plot curves showing sample size "n" as a function of acceptable error, with a separate curve for each level of confidence specified in "t.2tail"#
#
#	Create empty plot to contain curves#
plot(temp.df$error, temp.df$n, type="n", xlab="Error (proportion of mean)", ylab="Sample size (n)", xlim=c(0.05, max(temp.df$error)), ylim=c(0, max(temp.df$n)+5), main="Relationship between error and sample size\nat various levels of confidence")#
#
#	Employ "for" loop to plot curves for each value of "t.2tail"#
for (i in 1:length(t.2tail)){#
curve(t.2tail[i]^2*CV^2/x^2, 0.05, max(E), col=i, add=TRUE)#
#	End of "for" loop bracket#
}#
#
# Add lines to the plot that illustrate the location of the "n" value associated with acceptable error = 20% at a 95% confidence level.#
v.x = c(0.2,0.2)#
v.y = c(-1, temp.df[which(temp.df$error==0.2 & temp.df$CI.2tail=="95%"),"n"])#
lines(v.x, v.y, col="gray60", lty=1)#
h.x = c(0,0.2)#
h.y = c(temp.df[which(temp.df$error==0.2 & temp.df$CI.2tail=="95%"),"n"], temp.df[which(temp.df$error==0.2 & temp.df$CI.2tail=="95%"),"n"])#
lines(h.x, h.y, col="gray60", lty=1)#
#
# Add a point to the plot that illustrates the location of the "n" value for acceptable error = 20% of the mean at a 95% confidence level.#
points(0.2, temp.df[which(temp.df$error==0.2 & temp.df$CI.2tail=="95%"),"n"], pch=21, bg="gray80")#
#
# Create legend based on confidence levels contained in "t.2tail"#
legend("topright", c("95% conf (alpha/2=0.025)", "90% conf (alpha/2=0.05)", "80% conf (alpha/2=0.10)"), col=c("green", "red", "black"), title="Confidence level (2-tail)", lty=1, cex=0.8)#
##	Clean up "temp.df" to return to user#
temp.df$n = ceiling(temp.df$n)#
temp.df$tot.ha = round(temp.df$tot.ha, digits=2)#
return(temp.df)#
#
#	End of function bracket#
}
test = sample.num2(0.257,0.825,40)
test = sample.num2(0.3,0.825,40)
test = sample.num2(0.4,0.825,40)
q()
sample.sim1 = function(plot.size, iter.num){#
#
##	Calculate subsample plot area in hectares#
plot.area = plot.size^2/10000#
##	Read in user-supplied stem map data; it is necessary to prepare the stem map with code in "Data_preparation.R" prior to sample simulation.#
print("Select file containing stem map data")#
stemmap.df = read.csv(file.choose(), header=T)#
##	Load table of Jenkins parameters to use for biomass estimation of individual stems. Parameters come from Jenkins etal. 2003 Forest Science.#
print("Select file containing allometric parameters from Jenkins et al. 2003 Forest Science")#
jpar.df = read.csv(file.choose(), header=T)#
#
#	Create look-up array that matches "Jenkins_type" to the correct row in "jpar.df"#
jpar.LUT = 1:nrow(jpar.df)#
names(jpar.LUT) = jpar.df$groupID#
##	Plot location of stems in "stemmap.df"#
plot(stemmap.df$xdist, stemmap.df$ydist, type="n", xlab="Relative Easting (m)", ylab="Relative Northing (m)", main="Stem map with symbol size = relative stem DBH", cex.main=0.9)#
#
#	Add points with symbols sized according to DBH#
symbols(stemmap.df$xdist, stemmap.df$ydist, circles=stemmap.df$dbh.cm, inches=0.1, add=TRUE)#
##	Define spatial limits for random sub-sampling routine, leaving a buffer so that subsampling plots do not overlap the edge of the stemmap.df dataset.#
max.x = max(stemmap.df$xdist) - plot.size/2#
min.x = min(stemmap.df$xdist) + plot.size/2#
max.y = max(stemmap.df$ydist) - plot.size/2#
min.y = min(stemmap.df$ydist) + plot.size/2#
##	Create "agb.sampled" vector to hold AGB for each subsampling iteration#
agb.sampled = NA#
##	Sample-iteration "for" loop used to obtain AGB distribution according to user-specified plot.size; loop iterates n=iter.num times.#
#
for (i in 1:iter.num){#
#
##	Generate random X and Y sampling coordinates, leaving a buffer so that subsampling plots do not overlap the edge of the stemmap.df dataset.#
random.x = round(runif(1, min.x, max.x), digits=1)#
random.y = round(runif(1, min.y, max.y), digits=1)#
##	Plot random.x and random.y coordinates sampled for each iteration of loop#
symbols(random.x, random.y, squares=plot.size, inches=FALSE, add=TRUE, fg=4)#
##	Define "xdist" and "ydist" range within "stemmap.df" associated with "random.x" and "random.y" coordinates based on plot.size; filter first by "xdist" then by "ydist" to obtain a temporary matrix containing only those stems that fall within the randomly selected coordinate range.#
temp.stem = stemmap.df[which(stemmap.df$xdist >= random.x-plot.size/2 & stemmap.df$xdist < random.x+plot.size/2),]#
temp.stem = temp.stem[which(temp.stem$ydist >= random.y-plot.size/2 & temp.stem$ydist < random.y+plot.size/2),]#
##	Calculate the biomass of each stem in "temp.stem", sum biomass across all randomly subsampled stems, and store the result in "agb.sampled". Use "if/else" statement to deal with the case of no stems occurring within the random subsampling location.#
#
if (nrow(temp.stem) == 0){#
#
#	Assign AGB=0 if there are no stems within the random subsampling plot#
agb.sampled[i] = 0#
#
} else {#
#
#	Create temporary vector to store AGB values for each stem#
agb.temp = NA#
#
#	When stems exist in "temp.stem", use nested stem-mass "for" loop to calculate AGB for each stem "j" in "temp.stem"#
#
for (j in 1:nrow(temp.stem)){#
#
#	Retrieve correct Jenkins parameters for the stem based on "Jenkins_type" code#
temp.b0 = jpar.df[jpar.LUT[[as.character(temp.stem$Jenkins_type[j])]], "b0"]#
temp.b1 = jpar.df[jpar.LUT[[as.character(temp.stem$Jenkins_type[j])]], "b1"]#
#
#	Using Jenkins AGB equation, calculate the AGB in kg for stem "j" using DBH value for stem "j" in "temp.stem"#
agb.stem = exp(temp.b0 + temp.b1*log(temp.stem$dbh.cm[j]))#
#
#	Store AGB in kg for each stem "j"#
agb.temp[j] = agb.stem#
#
#	Bracket for end of stem-mass "for" loop#
}#
#
##	Calculate sum of biomass for all stems in randomly subsampled plot (kg), and convert to Mg ha-1 using plot.area; then store this value in "agb.sampled"#
agb.sampled[i] = sum(agb.temp)/1000/plot.area#
#	Bracket for end of sample-iteration "else" statement#
}#
#
#	Bracket for end of sample-iteration "for" loop#
}#
##	Calculate parameters required by "Sample_number_function2.R", and determine whether "agb.sampled" distribution is normal using both the Anderson-Darling normality test, and the Shapiro-Wilk normality test.#
agb.mean = mean(agb.sampled)#
agb.sd = sd(agb.sampled)#
require(nortest)#
AD = ad.test(agb.sampled)#
#
if (iter.num > 5000){#
SW = NA#
} else {#
SW = shapiro.test(agb.sampled)#
}#
#
##	Plot sampled distribution of AGB in a new window, and overlay a normal distribution with same mean and standard deviation as "agb.sampled"#
quartz()#
hist(agb.sampled, main="Distribution of sampled AGB (histogram)\nand normal distribution (red)", xlab="AGB (Mg ha-1)", prob=TRUE)#
curve(dnorm(x, mean=agb.mean, sd=agb.sd), add=TRUE, col=2)#
##	Bundle agb.sampled, mean, sd, and Anderson-Darling test results into a list, and return the list to the user#
results = list(agb=agb.sampled, mean=agb.mean, sd=agb.sd, ad=AD, sw=SW)#
return(results)#
#	Bracket for end of function#
}
test = sample.sim1(20,500)
names(test)
test$mean
test$sd
test$ad
test$sw
q()
weight = c(0.2,-0.5,-1.3,-1.6,-0.7,0.4,-0.1,0,-0.6,-1.1,-1.2,-0.8)
var(weight)
sd(weight)/mean(weight)
sd(weight)/abs(mean(weight))
faithful
?faithful
rm(list=ls())
q()
?reshape
q()
library(geoR)
q()
install.views("Spatial")
?install.views
??install.views
library(ctv)
install.views("Spatial")
q()
ls()
i
q()
?symbols
q()
install.packages(c("latticeExtra","ramps","lattice","sp","rgdal","gridExtra",#
"MCMCpack","mvtnorm","SuppDists","gstat"),dependencies=T)
)
require(rgdal)#
require(gstat)#
require(latticeExtra)#
require(gridExtra)#
require(ramps)#
require(lattice)#
require(sp)#
require(MCMCpack)#
require(mvtnorm)#
require(SuppDists)
q()
ls()
require(rgdal)#
require(gstat)#
require(latticeExtra)#
require(gridExtra)#
require(ramps)#
require(lattice)#
require(sp)#
require(MCMCpack)#
require(mvtnorm)#
require(SuppDists)
install.packages(c("latticeExtra","ramps","lattice","sp","rgdal","gridExtra",#
"MCMCpack","mvtnorm","SuppDists","gstat"),dependencies=T)
require(rgdal)#
require(gstat)#
require(latticeExtra)#
require(gridExtra)#
require(ramps)#
require(lattice)#
require(sp)#
require(MCMCpack)#
require(mvtnorm)#
require(SuppDists)
load("/Users/cmeier/Documents/R_resources/Duffy_simulation_design_201305/base_051313.Rdata")
ls()
rm(list=ls())
ls()
load("/Users/cmeier/Documents/R_resources/Duffy_simulation_design_201305/base_051313.Rdata")
ls()
quartz()
i=1
i
tmp.name<-paste("historical_harv_data","_",i,sep="")
tmp.name
library(gstat)
spattemp.mcmc(yr.begin=3,yr.end=5,data=harv.hist.dat,formula="beta[1]+beta[2]*t",separable=T, #
name=tmp.name,burnin=10000,mcmc=10000,thin=10,update.interval=1,tune=c(1,1,1,1,1,1),plotit=T)
head(harv.hist.dat)
q()
?file.name
Inputs required for assigning IDs and coordinates to clip-strip locations#
#	Obtain list of accepted plotIDs at CPER#
plot_accepted = read.csv("CPER_accepted_plots.csv", header=T)#
plot_ID = as.character(plot_accepted$Plot_ID)#
#
#	Define 1-sided plot/module size in meters in which grid-cell layout will exist, buffer size in meters, and define size of grid cells in meters.#
plot.edge = 20#
buffer.size = 1#
sample.height = plot.edge - 2*buffer.size#
sample.width = plot.edge - 2*buffer.size#
cell.height = 3#
cell.width = 0.5#
#
#	Define clip-strip dimensions within each grid cell#
clip.width = 0.1#
clip.height = 2#
#
#	Input module number within plot (necessary b/c grid cell IDs should not overlap across modules within the same plot), and assign start of grid cell series for a given module using "mod.num"#
mod.num = 1#
grid.start = c(0,249,499,749)#
#
#	Input size of largest subplot used for %cover estimates, m2#
subplot.size = 10#
##	Define dimensions of grid-cell layout, using the plot dimensions above.#
grid.col = sample.width/cell.width#
grid.row = sample.height/cell.height#
total.cell = grid.col*grid.row#
##	Create an 8-column matrix to hold clip_ID, grid_ID, x and y coordinates associated with the range of each grid cell, and the x and y coords of the SW corner of the clip-strip#
#	Create the matrix#
grid.mat = matrix(data=NA, nrow=total.cell, ncol=8)#
c.names = c("clip_ID","grid_ID","x_clip","y_clip","x1_cell","x2_cell","y1_cell","y2_cell")#
colnames(grid.mat) = c.names#
#
#	Create grid_IDs and add to the matrix#
grid_ID = seq(from=1, to=total.cell, by=1) + grid.start[mod.num]#
grid.mat[,"grid_ID"] = grid_ID#
##	Create x-axis and y-axis coordinates for the SW corner of each clip-harvest strip within each grid cell and add to the matrix. The clip strip itself is 0.1m W x 2m H oriented North/South, and is centered within the 0.5m x 3m grid cell such that there is a 0.2m buffer on the West/East sides of the strip, and a 0.5m buffer on the North/South sides of the strip.#
#
#	Define X and Y coords of SW corner of grid cells in each row of cells and each column of cells within the plot#
temp.x = seq(from=buffer.size, to=sample.width+cell.width, by=cell.width)#
temp.y = seq(from=buffer.size, to=(sample.height-1), by=cell.height)#
#
#	Create offset for column and row X and Y coords so that position corresponds to clip-strip within grid cell#
offset.x = temp.x + (cell.width-clip.width)/2#
offset.y = temp.y + (cell.height-clip.height)/2#
#
#	Calculate start and end X and Y coordinates for each grid cell, SW corner of each clip-strip within each grid cell, and add to the matrix created above#
cell.x1 = rep(temp.x, times=grid.row)#
cell.x2 = cell.x1+0.5#
cell.y1 = rep(temp.y, each=grid.col)#
cell.y2 = cell.y1+3#
clip.x = rep(offset.x, times=grid.row)#
clip.y = rep(offset.y, each=grid.col)#
grid.mat[,"x1_cell"] = cell.x1#
grid.mat[,"x2_cell"] = cell.x2#
grid.mat[,"y1_cell"] = cell.y1#
grid.mat[,"y2_cell"] = cell.y2#
grid.mat[,"x_clip"] = clip.x#
grid.mat[,"y_clip"] = clip.y#
##	Remove rows of "grid.mat" that overlap 10m2 subplots used for %cover estimates; ignore the 16cm of the 10m2 subplot that overlaps the 50 cm grid cell buffer, as technicians will position themselves will position themselves on the West/East side of clip-strips for harvesting.#
#
#	Transform grid.mat into a dataframe#
grid.df = data.frame(grid.mat)#
#
#	Read in table that specifies x and y ranges for 10m2 subplot borders#
subplots = read.csv("Subplot_coords_20m_plot.csv", header=T)#
#
#	Create an empty vector to hold list of grid_IDs that overlap 10m2 subplots#
grid.omit = c()#
#
#	Identify overlapping grid cells with a "for" loop, store associated grid_IDs in "grid.omit"; then remove elements of "grid.omit" from "grid.df" and only keep columns associated with clip-strip locations#
for (k in 1:nrow(subplots)){#
temp.grid = grid.df[which(grid.df$x1_cell < subplots$x2[k] & subplots$x1[k] < grid.df$x2_cell & grid.df$y1_cell < subplots$y2[k] & subplots$y1[k] < grid.df$y2_cell),]#
grid.omit = append(grid.omit, temp.grid$grid_ID)#
#	end of "for" loop#
}#
#
grid.omit = sort(grid.omit)#
clip.df = grid.df[!(grid.df$grid_ID %in% grid.omit), c("clip_ID","grid_ID","x_clip","y_clip")]#
##	Randomize rows of clip.df and create unique clip_ID that field technicians will assign to biomass bags originating from a given clip-strip.#
#
#	Create unique clip_ID by combining plot_ID with grid_ID, and add to clip.df#
clip_ID = paste(plot_ID[1], formatC(clip.df$grid_ID, width=3, format="d", flag="0"), sep="_")#
clip.df[,"clip_ID"] = clip_ID#
#
#	Shuffle clip.df by row#
clip.random = clip.df[sample(nrow(clip.df)),]
ls()
head(clip.random)
dim(clip.random)
?names
names(clip.df)
clip.cols = c("clip_ID","grid_ID","x_coord","y_coord")
names(clip.df) = clip.cols
head(clip.df)
rm(clip.random)
random.df = clip.df[sample(nrow(clip.df)),]
head(random.df)
subplots
test.name = test_subplots.csv
test.name = "test_subplots.csv"
test.name
write.csv(subplots, test.name, row.names=FALSE)
ls()
plot_ID
length(plot_ID)
plot_ID[1]
output.name = paste(plot_ID[1], "clip_coords", sep="_")
output.name
output.name = paste(plot_ID[1], "clip_coords.csv", sep="_")
output.name
Inputs required for assigning IDs and coordinates to clip-strip locations#
#	Obtain list of accepted plotIDs at CPER#
plot_accepted = read.csv("CPER_accepted_plots.csv", header=T)#
plot_ID = as.character(plot_accepted$Plot_ID)#
#
#	Define 1-sided plot/module size in meters in which grid-cell layout will exist, buffer size in meters, and define size of grid cells in meters.#
plot.edge = 20#
buffer.size = 1#
sample.height = plot.edge - 2*buffer.size#
sample.width = plot.edge - 2*buffer.size#
cell.height = 3#
cell.width = 0.5#
#
#	Define clip-strip dimensions within each grid cell#
clip.width = 0.1#
clip.height = 2#
#
#	Input module number within plot (necessary b/c grid cell IDs should not overlap across modules within the same plot), and assign start of grid cell series for a given module using "mod.num"#
mod.num = 1#
grid.start = c(0,249,499,749)#
##	Define dimensions of grid-cell layout, using the plot dimensions above.#
grid.col = sample.width/cell.width#
grid.row = sample.height/cell.height#
total.cell = grid.col*grid.row
rm(list=ls())
Inputs required for assigning IDs and coordinates to clip-strip locations#
#	Obtain list of accepted plotIDs at CPER#
plot_accepted = read.csv("CPER_accepted_plots.csv", header=T)#
plot_ID = as.character(plot_accepted$Plot_ID)#
#
#	Define 1-sided plot/module size in meters in which grid-cell layout will exist, buffer size in meters, and define size of grid cells in meters.#
plot.edge = 20#
buffer.size = 1#
sample.height = plot.edge - 2*buffer.size#
sample.width = plot.edge - 2*buffer.size#
cell.height = 3#
cell.width = 0.5#
#
#	Define clip-strip dimensions within each grid cell#
clip.width = 0.1#
clip.height = 2#
#
#	Input module number within plot (necessary b/c grid cell IDs should not overlap across modules within the same plot), and assign start of grid cell series for a given module using "mod.num"#
mod.num = 1#
grid.start = c(0,249,499,749)#
##	Define dimensions of grid-cell layout, using the plot dimensions above.#
grid.col = sample.width/cell.width#
grid.row = sample.height/cell.height#
total.cell = grid.col*grid.row
ls()
rm(list=ls())
Inputs required for assigning IDs and coordinates to clip-strip locations#
#	Obtain list of accepted plotIDs at CPER#
plot_accepted = read.csv("CPER_accepted_plots.csv", header=T)#
plot_ID = as.character(plot_accepted$Plot_ID)#
#
#	Define 1-sided plot/module size in meters in which grid-cell layout will exist, buffer size in meters, and define size of grid cells in meters.#
plot.edge = 20#
buffer.size = 1#
sample.height = plot.edge - 2*buffer.size#
sample.width = plot.edge - 2*buffer.size#
cell.height = 3#
cell.width = 0.5#
#
#	Define clip-strip dimensions within each grid cell#
clip.width = 0.1#
clip.height = 2#
#
#	Input module number within plot (necessary b/c grid cell IDs should not overlap across modules within the same plot), and assign start of grid cell series for a given module using "mod.num"#
mod.num = 1#
grid.start = c(0,249,499,749)#
##	Define dimensions of grid-cell layout, using the plot dimensions above.#
grid.col = sample.width/cell.width#
grid.row = sample.height/cell.height#
total.cell = grid.col*grid.row
ls()
plot_ID
Use a "for" loop to generate random clip-harvest locations for each plot listed in "plot_accepted"#
for (i in 1:length(plot_ID)){#
##	Create an 8-column matrix to hold clip_ID, grid_ID, x and y coordinates associated with the range of each grid cell, and the x and y coords of the SW corner of the clip-strip#
#	Create the matrix#
grid.mat = matrix(data=NA, nrow=total.cell, ncol=8)#
c.names = c("clip_ID","grid_ID","x_clip","y_clip","x1_cell","x2_cell","y1_cell","y2_cell")#
colnames(grid.mat) = c.names#
#
#	Create grid_IDs and add to the matrix#
grid_ID = seq(from=1, to=total.cell, by=1) + grid.start[mod.num]#
grid.mat[,"grid_ID"] = grid_ID#
##	Create x-axis and y-axis coordinates for the SW corner of each clip-harvest strip within each grid cell and add to the matrix. The clip strip itself is 0.1m W x 2m H oriented North/South, and is centered within the 0.5m x 3m grid cell such that there is a 0.2m buffer on the West/East sides of the strip, and a 0.5m buffer on the North/South sides of the strip.#
#
#	Define X and Y coords of SW corner of grid cells in each row of cells and each column of cells within the plot#
temp.x = seq(from=buffer.size, to=sample.width+cell.width, by=cell.width)#
temp.y = seq(from=buffer.size, to=(sample.height-1), by=cell.height)#
#
#	Create offset for column and row X and Y coords so that position corresponds to clip-strip within grid cell#
offset.x = temp.x + (cell.width-clip.width)/2#
offset.y = temp.y + (cell.height-clip.height)/2#
#
#	Calculate start and end X and Y coordinates for each grid cell, SW corner of each clip-strip within each grid cell, and add to the matrix created above#
cell.x1 = rep(temp.x, times=grid.row)#
cell.x2 = cell.x1+0.5#
cell.y1 = rep(temp.y, each=grid.col)#
cell.y2 = cell.y1+3#
clip.x = rep(offset.x, times=grid.row)#
clip.y = rep(offset.y, each=grid.col)#
grid.mat[,"x1_cell"] = cell.x1#
grid.mat[,"x2_cell"] = cell.x2#
grid.mat[,"y1_cell"] = cell.y1#
grid.mat[,"y2_cell"] = cell.y2#
grid.mat[,"x_clip"] = clip.x#
grid.mat[,"y_clip"] = clip.y#
##	Remove rows of "grid.mat" that overlap 10m2 subplots used for %cover estimates; ignore the 16cm of the 10m2 subplot that overlaps the 50 cm grid cell buffer, as technicians will position themselves will position themselves on the West/East side of clip-strips for harvesting.#
#
#	Transform grid.mat into a dataframe#
grid.df = data.frame(grid.mat)#
#
#	Read in table that specifies x and y ranges for 10m2 subplot borders; location of subplots must be specified in table referenced below#
subplots = read.csv("Subplot_coords_20m_plot.csv", header=T)#
#
#	Create an empty vector to hold list of grid_IDs that overlap 10m2 subplots#
grid.omit = c()#
#
#	Identify overlapping grid cells with a "for" loop, store associated grid_IDs in "grid.omit"; then remove elements of "grid.omit" from "grid.df" and only keep columns associated with clip-strip locations#
for (k in 1:nrow(subplots)){#
temp.grid = grid.df[which(grid.df$x1_cell < subplots$x2[k] & subplots$x1[k] < grid.df$x2_cell & grid.df$y1_cell < subplots$y2[k] & subplots$y1[k] < grid.df$y2_cell),]#
grid.omit = append(grid.omit, temp.grid$grid_ID)#
#	end of "for" loop#
}#
#
grid.omit = sort(grid.omit)#
clip.df = grid.df[!(grid.df$grid_ID %in% grid.omit), c("clip_ID","grid_ID","x_clip","y_clip")]#
##	Randomize rows of clip.df and create unique clip_ID that field technicians will assign to biomass bags originating from a given clip-strip.#
#
#	Create unique clip_ID by combining plot_ID with grid_ID, and add to clip.df#
clip_ID = paste(plot_ID[i], formatC(clip.df$grid_ID, width=3, format="d", flag="0"), sep="_")#
clip.df[,"clip_ID"] = clip_ID#
#
#	Rename clip.df columns so that x and y columns are clearly coordinates#
clip.cols = c("clip_ID","grid_ID","x_coord","y_coord")#
names(clip.df) = clip.cols#
#
#	Shuffle clip.df by row#
random.df = clip.df[sample(nrow(clip.df)),]#
##	Write randomized data frame of clip-strip locations to a .csv file#
#
#	Define file name for .csv#
output.name = paste(plot_ID[i], "clip_coords.csv", sep="_")#
#
#	Write output to .csv#
write.csv(random.df, file=output.name, row.names=FALSE)#
#	End of "for" loop#
}
rm(list=ls())
ls()
Inputs required for assigning IDs and coordinates to clip-strip locations#
#	Obtain list of accepted plotIDs at CPER#
plot_accepted = read.csv("CPER_accepted_plots.csv", header=T)#
plot_ID = as.character(plot_accepted$Plot_ID)#
#
#	Define 1-sided plot/module size in meters in which grid-cell layout will exist, buffer size in meters, and define size of grid cells in meters.#
plot.edge = 20#
buffer.size = 1#
sample.height = plot.edge - 2*buffer.size#
sample.width = plot.edge - 2*buffer.size#
cell.height = 3#
cell.width = 0.5#
#
#	Define clip-strip dimensions within each grid cell#
clip.width = 0.1#
clip.height = 2#
#
#	Input module number within plot (necessary b/c grid cell IDs should not overlap across modules within the same plot), and assign start of grid cell series for a given module using "mod.num"#
mod.num = 1#
grid.start = c(0,249,499,749)#
#
#	Read in table that specifies x and y ranges for 10m2 subplot borders; location of subplots must be specified in table referenced below#
subplots = read.csv("Subplot_coords_20m_plot.csv", header=T)#
#
#	Define dimensions of grid-cell layout, using the plot dimensions above.#
grid.col = sample.width/cell.width#
grid.row = sample.height/cell.height#
total.cell = grid.col*grid.row
ls()
Use a "for" loop to generate random clip-harvest locations for each plot listed in "plot_accepted"#
for (i in 1:length(plot_ID)){#
##	Create an 8-column matrix to hold clip_ID, grid_ID, x and y coordinates associated with the range of each grid cell, and the x and y coords of the SW corner of the clip-strip#
#	Create the matrix#
grid.mat = matrix(data=NA, nrow=total.cell, ncol=8)#
c.names = c("clip_ID","grid_ID","x_clip","y_clip","x1_cell","x2_cell","y1_cell","y2_cell")#
colnames(grid.mat) = c.names#
#
#	Create grid_IDs and add to the matrix#
grid_ID = seq(from=1, to=total.cell, by=1) + grid.start[mod.num]#
grid.mat[,"grid_ID"] = grid_ID#
##	Create x-axis and y-axis coordinates for the SW corner of each clip-harvest strip within each grid cell and add to the matrix. The clip strip itself is 0.1m W x 2m H oriented North/South, and is centered within the 0.5m x 3m grid cell such that there is a 0.2m buffer on the West/East sides of the strip, and a 0.5m buffer on the North/South sides of the strip.#
#
#	Define X and Y coords of SW corner of grid cells in each row of cells and each column of cells within the plot#
temp.x = seq(from=buffer.size, to=sample.width+cell.width, by=cell.width)#
temp.y = seq(from=buffer.size, to=(sample.height-1), by=cell.height)#
#
#	Create offset for column and row X and Y coords so that position corresponds to clip-strip within grid cell#
offset.x = temp.x + (cell.width-clip.width)/2#
offset.y = temp.y + (cell.height-clip.height)/2#
#
#	Calculate start and end X and Y coordinates for each grid cell, SW corner of each clip-strip within each grid cell, and add to the matrix created above#
cell.x1 = rep(temp.x, times=grid.row)#
cell.x2 = cell.x1+0.5#
cell.y1 = rep(temp.y, each=grid.col)#
cell.y2 = cell.y1+3#
clip.x = rep(offset.x, times=grid.row)#
clip.y = rep(offset.y, each=grid.col)#
grid.mat[,"x1_cell"] = cell.x1#
grid.mat[,"x2_cell"] = cell.x2#
grid.mat[,"y1_cell"] = cell.y1#
grid.mat[,"y2_cell"] = cell.y2#
grid.mat[,"x_clip"] = clip.x#
grid.mat[,"y_clip"] = clip.y#
##	Remove rows of "grid.mat" that overlap 10m2 subplots used for %cover estimates; ignore the 16cm of the 10m2 subplot that overlaps the 50 cm grid cell buffer, as technicians will position themselves will position themselves on the West/East side of clip-strips for harvesting.#
#
#	Transform grid.mat into a dataframe#
grid.df = data.frame(grid.mat)#
#
#	Create an empty vector to hold list of grid_IDs that overlap 10m2 subplots#
grid.omit = c()#
#
#	Using location of subplots specified in "subplots", identify overlapping grid cells with a "for" loop, store associated grid_IDs in "grid.omit"; then remove elements of "grid.omit" from "grid.df" and only keep columns associated with clip-strip locations#
#
for (k in 1:nrow(subplots)){#
temp.grid = grid.df[which(grid.df$x1_cell < subplots$x2[k] & subplots$x1[k] < grid.df$x2_cell & grid.df$y1_cell < subplots$y2[k] & subplots$y1[k] < grid.df$y2_cell),]#
grid.omit = append(grid.omit, temp.grid$grid_ID)#
#	end of "for" loop#
}#
#
grid.omit = sort(grid.omit)#
clip.df = grid.df[!(grid.df$grid_ID %in% grid.omit), c("clip_ID","grid_ID","x_clip","y_clip")]#
##	Randomize rows of clip.df and create unique clip_ID that field technicians will assign to biomass bags originating from a given clip-strip.#
#
#	Create unique clip_ID by combining plot_ID with grid_ID, and add to clip.df#
clip_ID = paste(plot_ID[i], formatC(clip.df$grid_ID, width=3, format="d", flag="0"), sep="_")#
clip.df[,"clip_ID"] = clip_ID#
#
#	Rename clip.df columns so that x and y columns are clearly coordinates#
clip.cols = c("clip_ID","grid_ID","x_coord","y_coord")#
names(clip.df) = clip.cols#
#
#	Shuffle clip.df by row#
random.df = clip.df[sample(nrow(clip.df)),]#
##	Write randomized data frame of clip-strip locations to a .csv file#
#
#	Define file name for .csv#
output.name = paste(plot_ID[i], "clip_coords.csv", sep="_")#
#
#	Write output to .csv#
write.csv(random.df, file=output.name, row.names=FALSE)#
##	End of "for" loop#
}
?load
?unlink
q()
ls()
rm(list=ls())
q()
